name: Benchmark Comment on PR
on:
    pull_request:
        branches:
            - main
jobs:
    benchmark:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: pnpm/action-setup@v4
            - name: Use Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'pnpm'
            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run benchmark
              run: |
                  pnpm bench > benchmark-output.txt 2>&1

                  echo "=== Benchmark Output ==="
                  cat benchmark-output.txt

                  node ./scripts/benchmark-to-md.mjs benchmark-output.txt ${{ github.event.pull_request.head.sha }} > benchmark-results.md

                  echo "=== Markdown Output ==="
                  cat benchmark-results.md

            - name: Post benchmark results as PR comment
              uses: actions/github-script@v6
              with:
                  script: |
                      const fs = await import('node:fs/promises');
                      const markdownContent = await fs.readFile('benchmark-results.md', 'utf8') +
                        '\n\n*Last updated by [GitHub Actions](https://github.com/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID + ')*';

                      const { data: comments } = await github.rest.issues.listComments({
                        ...context.repo,
                        issue_number: context.payload.pull_request.number,
                      });

                      const existingComment = comments.find(comment =>
                        comment.body.includes('### Benchmark Results')
                      );

                      if (existingComment) {
                        await github.rest.issues.updateComment({
                          ...context.repo,
                          comment_id: existingComment.id,
                          body: markdownContent,
                        });
                      } else {
                        await github.rest.issues.createComment({
                          ...context.repo,
                          issue_number: context.payload.pull_request.number,
                          body: markdownContent,
                        });
                      }
