name: Benchmark Comment on PR
on:
    pull_request:
        branches:
            - main
jobs:
    benchmark:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: pnpm/action-setup@v4
            - name: Use Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'pnpm'
            - name: Install dependencies
              run: pnpm install --frozen-lockfile
            - name: Run benchmark
              id: bench
              run: |
                  OUTPUT=$(pnpm bench)
                  echo "OUTPUT<<EOF" >> $GITHUB_ENV
                  echo "$OUTPUT" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV
            - name: Post benchmark results as PR comment
              uses: actions/github-script@v6
              with:
                  script: |
                      const fs = require('fs');
                      const output = process.env.OUTPUT;

                      // Parse benchmark summary lines
                      const benchmarkSummary = [];
                      const lines = output.split('\n');
                      let isInSummary = false;

                      for (const line of lines) {
                        if (line.includes('BENCH  Summary')) {
                          isInSummary = true;
                          continue;
                        }

                        if (isInSummary && line.trim() && !line.includes('BENCH')) {
                          // Parse each summary line
                          const match = line.match(/(\w+(?:\s+\w+)?).+?(\d+\.\d+)x faster than (.+)/);
                          if (match) {
                            benchmarkSummary.push({
                              test: line.split('>')[1]?.split('performance')[0]?.trim() || 'Unknown Test',
                              winner: match[1],
                              ratio: match[2],
                              loser: match[3].trim()
                            });
                          }
                        }
                      }

                      // Create markdown table
                      const markdownContent = [
                        '### Benchmark Results',
                        '',
                        '| Test | Winner | Speed Improvement |',
                        '|------|--------|------------------|',
                        ...benchmarkSummary.map(result =>
                          `| ${result.test} | ${result.winner} | ${result.ratio}x faster than ${result.loser} |`
                        ),
                        '',
                        '> Note: Higher numbers are better. Each number represents how many times faster the winner is.',
                        '',
                        '<details>',
                        '<summary>View Full Benchmark Output</summary>',
                        '',
                        '```',
                        output,
                        '```',
                        '</details>',
                        '',
                        '*Last updated by [GitHub Actions](https://github.com/' + process.env.GITHUB_REPOSITORY + '/actions)*'
                      ].join('\n');

                      const { data: comments } = await github.rest.issues.listComments({
                        ...context.repo,
                        issue_number: context.payload.pull_request.number,
                      });

                      const existingComment = comments.find(comment =>
                        comment.body.includes('### Benchmark Results')
                      );

                      if (existingComment) {
                        await github.rest.issues.updateComment({
                          ...context.repo,
                          comment_id: existingComment.id,
                          body: markdownContent,
                        });
                      } else {
                        await github.rest.issues.createComment({
                          ...context.repo,
                          issue_number: context.payload.pull_request.number,
                          body: markdownContent,
                        });
                      }
