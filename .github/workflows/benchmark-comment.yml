name: Benchmark Comment on PR
on:
    pull_request:
        branches:
            - main
jobs:
    benchmark:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: pnpm/action-setup@v4
            - name: Use Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'pnpm'
            - name: Install dependencies
              run: pnpm install --frozen-lockfile
            - name: Run benchmark
              id: bench
              run: |
                  OUTPUT=$(pnpm bench)
                  echo "OUTPUT<<EOF" >> $GITHUB_ENV
                  echo "$OUTPUT" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV
            - name: Post benchmark results as PR comment
              uses: actions/github-script@v6
              with:
                  script: |
                      const benchmarkResults = process.env.OUTPUT;

                      const commentBody = [
                        '### Benchmark Results',
                        '<pre>',
                        benchmarkResults,
                        '</pre>',
                        '',
                        '*Last updated by [GitHub Actions](https://github.com/' + process.env.GITHUB_REPOSITORY + '/actions)*'
                      ].join('\n');

                      const { data: comments } = await github.rest.issues.listComments({
                        ...context.repo,
                        issue_number: context.payload.pull_request.number,
                      });

                      const existingComment = comments.find(comment =>
                        comment.body.includes('### Benchmark Results')
                      );

                      if (existingComment) {
                        await github.rest.issues.updateComment({
                          ...context.repo,
                          comment_id: existingComment.id,
                          body: commentBody,
                        });
                      } else {
                        await github.rest.issues.createComment({
                          ...context.repo,
                          issue_number: context.payload.pull_request.number,
                          body: commentBody,
                        });
                      }
