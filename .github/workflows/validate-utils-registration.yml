name: Validate Utils Registration

on:
    pull_request_target:
        paths:
            - 'src/**'
            - 'index.ts'
            - 'package.json'
            - 'scripts/generate-utils.mjs'

jobs:
    check-utils:
        runs-on: ubuntu-latest
        permissions:
            pull-requests: write
        steps:
            - name: Checkout PR Head
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.ref }}
                  repository: ${{ github.event.pull_request.head.repo.full_name }}
                  fetch-depth: 0

            # Node/Pnpm 세팅
            - uses: pnpm/action-setup@v4

            - name: Use Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'pnpm'

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Generate Expected Config
              run: node scripts/generate-utils.mjs

            - name: Check and Comment Changes
              uses: actions/github-script@v7
              with:
                  script: |
                      const { execSync } = require('child_process');

                      const indexDiff = execSync('git diff --name-only index.ts').toString().trim();
                      const packageDiff = execSync('git diff --name-only package.json').toString().trim();

                      const hasChanges = indexDiff || packageDiff;
                      const prNumber = context.payload.pull_request.number;

                      if (hasChanges) {
                        let message = '### ⚠️ Module Registration Issue Detected\n\n';
                        message += 'Please run this command locally and commit the changes:\n```bash\npnpm generate\n```\n\n';
                        message += 'This will ensure all utility modules are properly registered in both index.ts and package.json';

                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: prNumber,
                          body: message
                        });

                        process.exit(1);

                      } else {
                        const successMessage = '✅ All utility modules are properly registered';

                        const comments = await github.rest.issues.listComments({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: prNumber
                        });

                        const botComment = comments.data.find(comment =>
                          comment.user.login === 'github-actions[bot]' &&
                          (
                            comment.body.includes('Module Registration Issue Detected') ||
                            comment.body.includes('All utility modules are properly registered')
                          )
                        );

                        if (botComment) {
                          await github.rest.issues.updateComment({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            comment_id: botComment.id,
                            body: successMessage
                          });
                        } else {
                          await github.rest.issues.createComment({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            issue_number: prNumber,
                            body: successMessage
                          });
                        }
                      }
