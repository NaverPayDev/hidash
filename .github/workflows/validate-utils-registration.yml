name: Validate Utils Registration

on:
    pull_request_target:
        paths:
            - 'src/**'
            - 'index.ts'
            - 'package.json'
            - 'scripts/generate-utils.mjs'

permissions:
    pull-requests: write

jobs:
    check-utils:
        runs-on: ubuntu-latest
        steps:
            - name: Check out PR head
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Fetch base branch
              run: git fetch origin ${{ github.event.pull_request.base.ref }}

            - name: Setup pnpm
              uses: pnpm/action-setup@v4

            - name: Use Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'pnpm'

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Generate Utils
              run: pnpm exec node scripts/generate-utils.mjs

            - name: Debug diff
              run: |
                  echo "=== index.ts diff ==="
                  git diff origin/${{ github.event.pull_request.base.ref }} -- index.ts
                  echo "=== package.json diff ==="
                  git diff origin/${{ github.event.pull_request.base.ref }} -- package.json

            - name: Check and Comment Changes
              uses: actions/github-script@v7
              with:
                  script: |
                      const { execSync } = require('child_process');
                      const fs = require('fs');

                      const prNumber = context.payload.pull_request.number;
                      const baseRef = context.payload.pull_request.base.ref;

                      let basePkgExports;
                      try {
                        const basePkgJson = execSync(`git show origin/${baseRef}:package.json`).toString();
                        basePkgExports = JSON.parse(basePkgJson).exports;
                      } catch (err) {
                        basePkgExports = {};
                      }

                      const localPkgJson = fs.readFileSync('package.json', 'utf-8');
                      const localPkg = JSON.parse(localPkgJson);
                      const localPkgExports = localPkg.exports || {};

                      const exportsChanged = (JSON.stringify(basePkgExports) !== JSON.stringify(localPkgExports));

                      let indexDiff = '';
                      try {
                        indexDiff = execSync(`git diff origin/${baseRef} -- index.ts`).toString().trim();
                      } catch (err) {
                        // ignore
                      }
                      const indexChanged = Boolean(indexDiff);

                      const hasChanges = exportsChanged || indexChanged;

                      const { data: allComments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: prNumber,
                      });

                      const existingBotComment = allComments.find(comment =>
                        (
                          comment.body.includes('Module Registration Issue Detected') ||
                          comment.body.includes('All utility modules are properly registered')
                        )
                      );

                      if (hasChanges) {
                        const message = "### ⚠️ Module Registration Issue Detected\n\n"
                          + "It looks like there are unregistered or mismatched modules in `package.json` exports or `index.ts`. "
                          + "Please run the following commands locally to update and commit:\n\n"
                          + "```bash\n"
                          + "pnpm generate\n"
                          + "git commit -am \"fix: update utils\"\n"
                          + "git push\n"
                          + "```\n";

                        if (existingBotComment) {
                          await github.rest.issues.updateComment({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            comment_id: existingBotComment.id,
                            body: message,
                          });
                        } else {
                          await github.rest.issues.createComment({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            issue_number: prNumber,
                            body: message,
                          });
                        }

                        process.exit(1);
                      } else {
                        const successMessage = "✅ All utility modules are properly registered in `index.ts` and `package.json` exports!";

                        if (existingBotComment) {
                          await github.rest.issues.updateComment({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            comment_id: existingBotComment.id,
                            body: successMessage,
                          });
                        } else {
                          await github.rest.issues.createComment({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            issue_number: prNumber,
                            body: successMessage,
                          });
                        }
                      }
